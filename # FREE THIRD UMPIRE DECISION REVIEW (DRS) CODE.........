# THIRD UMPIRE DECISION REVIEW (DRS) 

import tkinter
import cv2 
import PIL.Image, PIL.ImageTk
from functools import partial
import threading
import time
import imutils


stream = cv2.VideoCapture("videotwo.mp4")
flag = True
def play(speed):
    global flag
    print(f"You clicked on play. Speed is {speed}")

    # Play the video in reverse mode
    frame1 = stream.get(cv2.CAP_PROP_POS_FRAMES)
    stream.set(cv2.CAP_PROP_POS_FRAMES, frame1 + speed)

    grabbed, frame = stream.read()
    if not grabbed:
        exit()
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image = PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0,0, image=frame, anchor=tkinter.NW)
    if flag:
        canvas.create_text(134, 26, fill="black", font="Times 26 bold", text="Decision Pending")
    flag = not flag


def pending(decission):
   # 1. Display  desission pending image
    frame  = cv2.cvtColor(cv2.imread("allout.jpg"), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame =PIL.ImageTk.PhotoImage( image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0,0, image=frame, anchor=tkinter.NW)

   # 2. wait for 1 second 
    time.sleep(2)

   # 3. Display sponsor image 
    frame  = cv2.cvtColor(cv2.imread("sponsar.jpg"), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame =PIL.ImageTk.PhotoImage( image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0,0, image=frame, anchor=tkinter.NW)

   # 4.wait for 1.5 second 
    time.sleep (1.5)

   # 5.Display out/notout image
    if decission == "out" :
        decisionImg = "oute.jpg"
    else:
        decisionImg = " not_out.png" 

    frame = cv2.cvtColor(cv2.imread(decisionImg), cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width=SET_WIDTH, height=SET_HEIGHT)
    frame =PIL.ImageTk.PhotoImage( image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0,0, image=frame, anchor=tkinter.NW)

   # 6. wait for 1.5 second 
    
def out():
    thread  = threading.Thread(target=pending, args=(" out",))
    thread.daemon = 1
    thread.start()
    print("player is out")

def not_out():
    thread  = threading.Thread(target=pending, args=(" not out",))
    thread.daemon = 1
    thread.start()
    print("player is not out")

# width and height of our main screen
SET_WIDTH = 790
SET_HEIGHT = 400

#tkinter gui start here 
window =tkinter.Tk()
window.title("codeWithAkash Third Umpire Decision Review kit ")
cv_img = cv2.cvtColor(cv2.imread("worldwarthree.jpg"), cv2.COLOR_BGR2RGB)
canvas = tkinter.Canvas(window, width=SET_WIDTH, height=SET_HEIGHT)
photo = PIL.ImageTk.PhotoImage(image= PIL.Image.fromarray(cv_img))
image_on_canvas = canvas.create_image(0, 0, ancho=tkinter.NW, image=photo )
canvas.pack()

#Buttons to contral playback
btn =tkinter.Button(window, text="<< previous (fast)", width=50, command=partial (play, -25))
btn.pack()

btn =tkinter.Button(window, text="<< previous (slow)", width=50, command=partial (play, -2))
btn.pack()

btn =tkinter.Button(window, text=" Next (slow) >>", width=50, command=partial (play, 2))
btn.pack()

btn =tkinter.Button(window, text=" Next (fast) >>", width=50, command=partial (play, 25))
btn.pack()

btn =tkinter.Button(window, text=" Give out", width=50, command=out)
btn.pack()

btn =tkinter.Button(window, text=" Give Not out", width=50,command=not_out )
btn.pack()

window.mainloop()




